// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppObject The App Object
// swagger:model AppObject
type AppObject struct {

	// company
	// Required: true
	Company *string `json:"company"`

	// description
	// Required: true
	Description *string `json:"description"`

	// license
	// Required: true
	License *string `json:"license"`

	// maintainers
	// Required: true
	Maintainers []*Maintainer `json:"maintainers"`

	// source
	// Required: true
	Source *string `json:"source"`

	// title
	// Required: true
	Title *string `json:"title"`

	// version
	// Required: true
	Version *string `json:"version"`

	// website
	// Required: true
	Website *string `json:"website"`
}

// Validate validates this app object
func (m *AppObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebsite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppObject) validateCompany(formats strfmt.Registry) error {

	if err := validate.Required("company", "body", m.Company); err != nil {
		return err
	}

	return nil
}

func (m *AppObject) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *AppObject) validateLicense(formats strfmt.Registry) error {

	if err := validate.Required("license", "body", m.License); err != nil {
		return err
	}

	return nil
}

func (m *AppObject) validateMaintainers(formats strfmt.Registry) error {

	if err := validate.Required("maintainers", "body", m.Maintainers); err != nil {
		return err
	}

	for i := 0; i < len(m.Maintainers); i++ {
		if swag.IsZero(m.Maintainers[i]) { // not required
			continue
		}

		if m.Maintainers[i] != nil {
			if err := m.Maintainers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("maintainers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppObject) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *AppObject) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *AppObject) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *AppObject) validateWebsite(formats strfmt.Registry) error {

	if err := validate.Required("website", "body", m.Website); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppObject) UnmarshalBinary(b []byte) error {
	var res AppObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
